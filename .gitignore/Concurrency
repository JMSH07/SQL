
#2. Uncommitted dependency (dirty read): one begin when other calculate
#3. Inconsistent analysis problem: occurs when a transaction reads several values from the database but a second transaction 
##                                 updates some of them during the execution of the first. 
##2-phase locking (2PL):A transaction follows the two-phase locking protocol if all locking opera- tions precede the first 
##                      unlock operation in the transaction.
##                      first a growing phase, in which it acquires all the locks needed but cannot release any locks, 
##                      and then a shrinking phase, in which it releases its locks but cannot acquire any new locks. 

#1.Lost Update: one begin when other read
## Preventing Lost Update
TIME                T1                           T2
T1                                       begin_transaction      
T2            begin_transaction             write_lock(balx)
T3             write_lock(balx)             read(balx)
T4                WAIT                      balx=balx+100
T5                WAIT                      write(balx)
T6                WAIT                   commit/unlock(balx)
T7             read(balx)
T8             balx=balx-10
T9            write(balx)

#2. Uncommitted dependency (dirty read): one begin when other calculate
## Prevention dirty read
Time              T1                      T2                     T3          T4 
A                                                                       Begin Transaction
B            Begin transactions     Write Lock(balx)     Read(balx)     balx=balx+100
Database       100                        100                  100           100

 
TIME T5                  T6                  T7            T8             T9             T10
A    writelock(balx)     WAIT             READ(balx)   balx=balx-10   write balx    commit unlock(balx)
B    write(balx)        Rollbakc- unlick(balx)
Database 200             100                100            100           90              90

#3.DEADLOCK AVOIDENCE
Time        T1                                      T2               T3                    T4
User A     Read paper,lock(paper)             read Pencil         paper+1               Pencil+1
USER B     Read pencil( Not Available Wait)    Not Avail (Wait)   Read Pencil (wait)     Read-papaer (wait)
Database  paper pencil                        paper pencil        paper pencil           paper pencil

Time        T5                                        T6               T7                        T8         
User A     Commit paper+1                     commit pencil+1      Release all locks        End or auto other processing   
USER B     Read pencil( Not Available Wait)    Not Avail (Wait)   Read Pencil  pencil+1        pencil+1+1 pencil+1+1
Database    paper+1 pencil                 Paper+1 Pencil +1      Paper+1 Pencil+1+1            paper+1 pencil +1


 Time        T9                              T10                        T11                     T12              T13
User A     ....                             ....                      ....                     ....            ....
User B   Commit(Pencil +1+1) pencil+1+1   read paper+1 paper+1        paper+1+1 paper+1+1    commit paper+1+1    release all locks
Database  paper+1 pencil +2                paper+1 pencil 2            paper+1 pencil 2        paper 2  pencil 2  paper 2 pencil 2
